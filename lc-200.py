from queue import Queue

class Solution:
    def numIslands(self, grid: list[list[str]]) -> int:
        rows = len(grid)
        cols = len(grid[0])
        island_cnt = 0

        directions = [(-1, 0), (0, -1), (1, 0), (0, 1)]

        for i in range(rows):
            for j in range(cols):

                if grid[i][j] == '1':
                    island_cnt += 1

                    bfs_queue = Queue()
                    bfs_queue.put((i, j))
                    grid[i][j] = "2"

                    while not bfs_queue.empty():
                        curr_pos = bfs_queue.get()
                        # mark current land as visited
                        # try four directions
                        for direct in directions:
                            new_pos = (
                                curr_pos[0] + direct[0],
                                curr_pos[1] + direct[1]
                                )
                            # check if next step is inside of grid map
                            if new_pos[0] < 0 or new_pos[0] >= rows \
                                or new_pos[1] < 0 or new_pos[1] >= cols:
                                continue
                            if grid[new_pos[0]][new_pos[1]] == '1':
                                bfs_queue.put((new_pos[0], new_pos[1]))
                                grid[new_pos[0]][new_pos[1]] = "2"
        
        return island_cnt

sol = Solution()
grid1 = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
grid2 = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
grid3 = [["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],
         ["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],
         ["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],
         ["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]
res = sol.numIslands(grid3)

print(res)
                    
                        
